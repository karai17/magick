local magick = require("magick.gmwand")
return describe("magick", function()
  it("has a version", function()
    return assert.truthy(magick.VERSION)
  end)
  describe("image", function()
    local load_image, load_image_from_blob
    load_image, load_image_from_blob = magick.load_image, magick.load_image_from_blob
    it("loads an image", function()
      local image = assert(load_image("spec/test_image.png"))
      assert.same(64, image:get_width())
      return assert.same(64, image:get_height())
    end)
    it("handles image that doesn't exist", function()
      local img, err = load_image("spec/doesntexis.png")
      assert["nil"](img)
      return assert.same("Unable to open file (spec/doesntexis.png)", err)
    end)
    return it("loads blob", function()
      local blob = io.open("spec/test_image.png"):read("*a")
      local image = load_image_from_blob(blob)
      assert.same(64, image:get_width())
      return assert.same(64, image:get_height())
    end)
  end)
  return describe("with image", function()
    local load_image, load_image_from_blob
    load_image, load_image_from_blob = magick.load_image, magick.load_image_from_blob
    local out_path
    out_path = function(fname)
      return "spec_gm/output_images/" .. tostring(fname)
    end
    local img
    before_each(function()
      img = assert(load_image("spec/test_image.png"))
    end)
    it("get_blob", function()
      local blob = assert(img:get_blob())
      local reloaded = load_image_from_blob(blob)
      assert.same(64, reloaded:get_width())
      return assert.same(64, reloaded:get_height())
    end)
    it("resize", function()
      assert(img:resize(nil, 80))
      return assert(img:write(out_path("resize.png")))
    end)
    it("crop", function()
      assert(img:crop(20, 20))
      return assert(img:write(out_path("crop.png")))
    end)
    it("scale", function()
      assert(img:scale(80))
      return assert(img:write(out_path("scale.png")))
    end)
    it("resize_and_crop", function()
      assert(img:resize_and_crop(500, 1000))
      return assert(img:write(out_path("resize_and_crop.png")))
    end)
    it("blur", function()
      assert(img:blur(3, 10))
      return assert(img:write(out_path("blur.png")))
    end)
    it("sharpen", function()
      assert(img:sharpen(3, 10))
      return assert(img:write(out_path("sharp.png")))
    end)
    it("scale", function()
      assert(img:scale(80))
      return assert(img:write(out_path("scale.png")))
    end)
    it("composite", function()
      local img2 = img:clone()
      assert(img2:resize(32))
      assert(img:composite(img2, 10, 20))
      return assert(img:write(out_path("composite.png")))
    end)
    it("modulate", function()
      local img2 = img:clone()
      assert(img:modulate(50, 50, 50))
      return assert(img:write(out_path("modulate.png")))
    end)
    it("gets format", function()
      return assert.same("png", img:get_format())
    end)
    it("sets format", function()
      local img2 = img:clone()
      img2:set_format("bmp")
      assert.same("bmp", img2:get_format())
      return assert(img:write(out_path("b.bmp")))
    end)
    it("repage", function()
      local img2 = img:clone()
      img2:crop(10, 10, 10, 10)
      return img2:reset_page()
    end)
    it("gets depth", function()
      local d = img:get_depth()
      return assert.same(8, d)
    end)
    return it("sets depth", function()
      local img2 = img:clone()
      return img2:set_depth(16)
    end)
  end)
end)
